%\VignetteIndexEntry{CrlmmDownstream Vignette}
%\VignetteKeywords{copy number, genotype, SNP}
%\VignettePackage{VanillaICE}
\documentclass{article}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{color}
\usepackage[margin=1in]{geometry}

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}
\newcommand{\Rpackage}[1]{\textit{#1}}
\newcommand{\Rfunction}[1]{\texttt{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{\Robject{#1}}
\newcommand{\R}{\textsf{R}}
\newcommand{\hmmoptions}{\Robject{HmmOptions}}
\newcommand{\hmmparam}{\Robject{HmmParameter}}
\newcommand{\crlmm}{\Rpackage{crlmm}}
\newcommand{\oligo}{\Rpackage{oligo}}
\newcommand{\code}[1]{\Robject{#1}}

\newcommand{\cne}{\widehat{\text{CN}}}
\newcommand{\gte}{\widehat{\text{GT}}}
\newcommand{\gtehom}{\widehat{\text{HOM}}}
\newcommand{\gtehet}{\widehat{\text{HET}}}
\newcommand{\pgte}{\text{S}_{\widehat{\text{\tiny GT}}}}
\newcommand{\pcne}{\text{S}_{\widehat{\text{\tiny CN}}}}
\newcommand{\pgtehom}{\text{S}_{\widehat{\text{\tiny HOM}}}}
\newcommand{\pgtehet}{\text{S}_{\widehat{\text{\tiny HET}}}}
\newcommand{\thom}{\text{HOM}}
\newcommand{\thet}{\text{HET}}
\newcommand{\bDelta}{\mbox{\boldmath $\Delta$}}
\newcommand{\real}{\mbox{$\mathbb R$}}      % real numbers
\newcommand{\bnu}{\mbox{\boldmath $\nu$}}
\newcommand{\ice}{\Rpackage{VanillaICE}}

\begin{document}
\title{A hidden Markov model for SNP arrays processed with \crlmm{}}
\author{Robert Scharpf}
\maketitle

<<loadCnSet>>=
require("crlmm")
library(VanillaICE)
library(RColorBrewer)
@

<<echo=FALSE>>=
##setCacheDir("/nexsan2/disk3/rscharpf/VanillaICE")
@

\section{For datasets with more than 10 samples}

For datasets with more than 10 samples processed in a batch, copy
number estimation using the linear model described in Scharpf et al,
2010 is feasible.  Following the vignettes for copy number analysis in
the \Rpackage{crlmm} package, one obtains an object of class
\Robject{CNSet}.  Here we describe how to smooth the copy number
estimates integrating information from the B allele frequencies.  We
begin with a \Robject{CNSet} object containing the information on
chromosome 8 for two samples.  These samples were processed as part of
a larger batch, which is why estimates from the linear model are
available.

<<cnSetExample>>=
data(cnSetExample, package="crlmm")
@

We begin by ordering the \Robject{CNSet} object by chromosome and
physical position, then coercing the ordered \code{CNSet} object to an
object of class \code{oligoSnpSet}.  If the \code{CNSet} object were
very large, we might want to subset the \code{CNSet} by batch prior to
subsetting. See the Section \ref{large:cnset} for details.  Here, the
object is small by design and there is no need for additional
subsetting.  After coercion, the copy number estimates are saved on
the log base 2 scale.

<<coerceToOligoSnpSet>>=
cnSetExample <- chromosomePositionOrder(cnSetExample)
oligoSet <- as(cnSetExample, "oligoSnpSet")
range(copyNumber(oligoSet), na.rm=TRUE)
@

As BAFs may help improve the detection of hemizygous deletions and
copy number duplications, we add estimates of the B allele frequencies
to the \Robject{oligoSet} object as follows.

<<BAFs>>=
assayDataElement(oligoSet, "baf") <- calculateRBaf(cnSetExample)[["baf"]]
@

As in the \texttt{VanillaICE} vignette, we generate default parameters
for the \Rfunction{hmm} using the \Robject{HmmOptionList} constructor.

<<HmmOptionList>>=
hmmOpts <- HmmOptionList(oligoSet, is.log=TRUE)
@

We now smooth the copy number estimates, integrating emission
probabilities obtained from copy number and the emission probabilities
obtained from the BAFs. See the documentation for
\Rfunction{cnEmission} and \Rfunction{bafEmission} for details
regarding the estimation of emission probabilities.

<<fitWithBAF>>=
fit <- hmm(oligoSet, hmmOpts, use.baf=TRUE)
@

The \Robject{fit} object is an object of class \Rclass{RangedDataHMM}.
Several useful accessors are defined for this class, including
\Rfunction{sampleNames}, \Rfunction{state}, and
\Rfunction{chromosome}.  In addition, \code{findOverlaps} methods
defined for the class can be useful for identifying which markers in
the original \code{oligoSet} object lie within a particular range.
Methods for visualizing the low level summaries along with the
inferred breakpoints for the copy number states make use of the
\Rfunction{findOverlaps}.  For example, in the following code chunk we
plot the copy number estimates color coded by genotype for each of the
range.  Using the argument \code{frame}, we can include more or fewer
markers to the left and right of the breakpoints. See the function
\Rfunction{xypanel} for details on how to modify the appearance of the
plotting symbols.


<<visualizationCopyNumber,fig=TRUE>>=
cnfig <- xyplot(cn ~ x | range, data=oligoSet, range=fit[1:10, ], frame=2e6,
		panel=xypanel, cex=0.3, pch=21, border="blue",
		scales=list(x="free", cex=0.6),
		col.hom="lightblue", col.het="salmon", col.np="grey60", fill.np="grey60")
print(cnfig)
@

<<visualizationBAFs,fig=TRUE>>=
baffig <- xyplot(baf ~ x | range, data=oligoSet, range=fit[1:10, ], frame=2e6,
		 panel=xypanel, cex=0.3, pch=21, border="blue",
		 scales=list(x="free", cex=0.6),
		 col.hom="lightblue", col.het="salmon", col.np="grey60", fill.np="grey60")
print(baffig)
@


\subsection{Large \code{CNSet} objects}
\label{large:cnset}

Recall that any subset operation pulls the data from disk to RAM.

<<subsetLargeCNSet,eval=FALSE>>=
sample.index.list <- split(seq_len(ncol(bigCnSet)), batch(bigCnSet))
for(i in seq_along(sample.index.list)){
	sample.index <- sample.index.list[[i]]
	cnSet <- bigCnSet[, sample.index]
	cnSet <- order(cnSet)
	oligoSet <- as(cnSet, "oligoSnpSet")
	## and so on
}
@



\section{Session Information}
<<sessionInfo,results=tex>>=
toLatex(sessionInfo())
@

\end{document}
